#+OPTIONS: toc:nil
#+BEGIN_HTML
---
layout: post
title: org-modeで書いた小説をmagitでGitHubに投稿する
---
#+END_HTML

* このページで紹介すること

  emacsのorg-modeで書いた小説などの文章を，GitHubに投稿して読めるようにする方法を紹介します。GitHubにはブラウザでファイルをアップロードすればpushできるという便利な機能があります。ただし今回は執筆→投稿まで全てemacsで行いたいので，バージョン管理はmagitで行います。

* このページで紹介しないこと

  magitを使ったブランチとマージの方法については紹介しません。そのため小説を書いていてありがちな「行き詰まったから前の版に戻したいけど今のルートも保険で残しておきたい。Gitを使えば手軽にできるらしいがどうすればいいんだ？」という要望を叶える方法はここには書いてありませんのでご了承ください。

* magitのインストールおよび設定

  GitHubのアカウントを既に持っているものとします (ない方は作ってください)。emacsでmagitをインストール (M-x package-install magit) したらinit.elに以下の行を追加します。

#+BEGIN_EXAMPLE
;; magit
(require 'magit)

;; org-markdown
(eval-after-load "org"
  '(require 'ox-md nil t))
#+END_EXAMPLE

* GitHubでリポジトリ作成
  GitHubでリポジトリを作成します。
  #+ATTR_HTML: alt="Create a new repository" width="300px"
  [[file:01.png]]

  <br>
  リポジトリができました。
  #+ATTR_HTML: alt="git information"  width="350px"
  [[file:02.png]]

* org-modeで書いたファイルをmarkdown形式にする
  文章を書いた.orgファイルそのものはブラウザで読みやすい形にはしてくれないので，markdown形式に出力します。(追記: githubのバージョンアップでorgファイルでも読みやすくなりました。)

#+BEGIN_EXAMPLE
C-c C-e m m
#+END_EXAMPLE

フォルダ名はGitHubで作成したリポジトリ名と同じものにしてください。今回はShortShortというフォルダにREADME.org (目次)，その中のarticleというフォルダにWhaleDreams.orgというファイル (小説の本文) と，それぞれmarkdown形式で出力したものを置いています。

* magitでコミットする
  README.mdがある場所でmagitを起動します。

#+BEGIN_EXAMPLE
M-x magit-status
#+END_EXAMPLE

<br>
実行すると別ウインドウにmagit-statusの画面が表示されます (adminiという名前ですが権限は一般ユーザーです)。
  #+ATTR_HTML: alt="magit-status" width="300px"
  [[file:03.png]]

  Enterを押すとgitリポジトリを作成するか聞かれるので，yを押すとフォルダ内に.gitフォルダが作成されます。

  <br>
  次にmagit-statusを起動すると変更点が表示されます。
  #+ATTR_HTML: alt="Untracked files" width="300px"
  [[file:04.png]]

  <br>
  ここでsを押すと，"Unstaged" が "Staged" に変わります。コミットの準備完了の合図です。
  #+ATTR_HTML: alt="Staged changes" width="300px"
  [[file:05.png]]

  <br>
  cを2回押すとコミット画面になるので，コメントを書きます。
  #+ATTR_HTML: alt="COMMIT_EDITMSG" width="300px"
  [[file:06.png]]
  
  <br>
  コメントを書き終わってC-c C-cするとコミットが完了します。
  #+ATTR_HTML: alt="Commit finished" width="300px"
  [[file:07.png]]

* GitHubにプッシュする

  Shift-M aを押すとRemote nameの入力を促されるので，originと入力します。
  #+ATTR_HTML: alt="Remote name" width="300px"
  [[file:08.png]]

  <br>
  Remote先をきかれるので，GitHubの該当するリポジトリURLを入力します (今回はShortShortのあるURL)。
  #+ATTR_HTML: alt="Remote url" width="300px"
  [[file:09.png]]

  <br>
  Set 'remote.pushDefault' to "origin"? ときかれるのでyを押します。するとorigin/master is missingとなります。
  #+ATTR_HTML: alt="origin master is missing" width="300px"
  [[file:10.png]]

  <br>
  Shift-P uを押すとupsteam of masterを選択するよう促されるので，そのままEnterを押します。
  #+ATTR_HTML: alt="Change upstream of master to" width="300px"
  [[file:11.png]]

  <br>
  ユーザー名とパスワードを入力し，Git finishedと表示されればプッシュ完了です。
  #+ATTR_HTML: alt="Git finished" width="300px"
  [[file:12.png]]

  <br>
  ブラウザでリポジトリを見ると，空っぽのときと比べてファイルが追加されているのがわかります。
  #+ATTR_HTML: alt="browser repository screen" width="300px"
  [[file:13.png]]

* 以降の流れ
  - 文章を書いたらmagit-statusを起動
  - Unstaged Filesをsを押してStagedにする
  - c cでコメントを書いてC-c C-cでコミット
  - Shift-P uでユーザー名とパスワードを入力してGitHubにプッシュする
    + (追記 2016/10/03) 初回の設定に手間がかかりますがsshで簡略化する方法もあります。オススメ。 → [[https://jamcha-aa.github.io/2016/09/13/ntemacs.html][https://jamcha-aa.github.io/2016/09/13/ntemacs.html]]
